import "bnet/rpc.proto";
import "bnet/exchange.proto";
import "bnet/exchange_object_provider_types.proto";
import "bnet/exchange_risk_types.proto";
import "bnet/entity.proto";
import "bnet/exchange_types.proto";

package bnet.protocol.exchange;

option cc_generic_services = false;

message CreateOrderBookRequest
{
    required .bnet.protocol.exchange.PartitionId partition_id = 1;
    required .bnet.protocol.exchange.OrderBook order_book = 2;
}

message CreateOrderBookResponse
{
    optional uint64 order_book_id = 1;
}

message PlaceOfferOnOrderBookRequest
{
    required .bnet.protocol.exchange.PartitionId partition_id = 1;
    required .bnet.protocol.exchange.OfferCreation offer_creation = 2;
}

message PlaceOfferOnOrderBookResponse
{
    optional uint64 order_book_id = 1;
    optional uint64 offer_id = 2;
}

message PlaceOfferCreateOrderBookIfNeededRequest
{
    required .bnet.protocol.exchange.PartitionId partition_id = 1;
    required .bnet.protocol.exchange.OrderBook order_book = 2;
    required .bnet.protocol.exchange.OfferCreation offer_creation = 3;
}

message PlaceOfferCreateOrderBookIfNeededResponse
{
    optional uint64 order_book_id = 1;
    optional uint64 offer_id = 2;
}

message PlaceBidOnOrderBookRequest
{
    required .bnet.protocol.exchange.PartitionId partition_id = 1;
    required .bnet.protocol.exchange.BidCreation bid_creation = 2;
}

message PlaceBidOnOrderBookResponse
{
    optional uint64 order_book_id = 1;
    optional uint64 bid_id = 2;
}

message PlaceBidCreateOrderBookIfNeededRequest
{
    required .bnet.protocol.exchange.PartitionId partition_id = 1;
    required .bnet.protocol.exchange.OrderBook order_book = 2;
    required .bnet.protocol.exchange.BidCreation bid_creation = 3;
}

message PlaceBidCreateOrderBookIfNeededResponse
{
    optional uint64 order_book_id = 1;
    optional uint64 bid_id = 2;
}

message QueryOffersByOrderBookRequest
{
    required .bnet.protocol.exchange.PartitionId partition_id = 1;
    required .bnet.protocol.exchange.QueryFilterByOrderId filter = 2;
    required int32 status = 3;
}

message QueryOffersByOrderBookResponse
{
    repeated .bnet.protocol.exchange.OfferExtended offers = 1;
    required uint32 total_count = 2;
}

message QueryBidsByOrderBookRequest
{
    required .bnet.protocol.exchange.PartitionId partition_id = 1;
    required .bnet.protocol.exchange.QueryFilterByOrderId filter = 2;
    required int32 status = 3;
}

message QueryBidsByOrderBookResponse
{
    repeated .bnet.protocol.exchange.BidExtended bids = 1;
    required uint32 total_count = 2;
}

message QueryOffersByAccountForItemRequest
{
    required .bnet.protocol.exchange.BlobFrom account_for_item = 1;
    required .bnet.protocol.exchange.QueryFilterByCreatedTime filter = 2;
    optional .bnet.protocol.EntityId bnet_account = 3;
}

message QueryOffersByAccountForItemResponse
{
    repeated .bnet.protocol.exchange.OfferExtended offers = 1;
    required uint32 total_count = 2;
}

message QueryBidsByAccountForItemRequest
{
    required .bnet.protocol.exchange.BlobFrom account_for_item = 1;
    required .bnet.protocol.exchange.QueryFilterByCreatedTime filter = 2;
    optional .bnet.protocol.EntityId bnet_account = 3;
}

message QueryBidsByAccountForItemResponse
{
    repeated .bnet.protocol.exchange.BidExtended bids = 1;
    required uint32 total_count = 2;
}

message QueryOrderBooksSummaryRequest
{
    repeated .bnet.protocol.exchange.OrderBookHandle handles = 1;
}

message QueryOrderBooksSummaryResponse
{
    repeated .bnet.protocol.exchange.OrderBookSummary order_books = 1;
}

message SubscribeOrderBookStatusChangeRequest
{
    required uint64 object_id = 1;
    required .bnet.protocol.exchange.PartitionId min_partition_id = 2;
    required .bnet.protocol.exchange.PartitionId max_partition_id = 3;
    required fixed32 program = 4;
    required int32 status = 5;
    optional string currency = 6;
    optional int32 specialist = 7;
    optional bool bootstrap = 8;
    optional uint64 bootstrap_oldest_created_time = 9;
}

message UnsubscribeOrderBookStatusChangeRequest
{
}

message SubscribeOrderStatusChangeRequest
{
    required .bnet.protocol.EntityId agent_id = 1;
    required uint64 object_id = 2;
}

message UnsubscribeOrderStatusChangeRequest
{
    required .bnet.protocol.EntityId agent_id = 1;
    required uint64 object_id = 2;
}

message ClaimRequest
{
    optional .bnet.protocol.exchange.PartitionId partition_id = 1;
    optional uint64 order_id = 2;
    optional fixed32 program = 3;
    optional .bnet.protocol.EntityId bnet_account = 4;
}

message CancelRequest
{
    required .bnet.protocol.exchange.PartitionId partition_id = 1;
    required uint64 order_id = 2;
    optional uint32 reason = 3;
    optional .bnet.protocol.EntityId bnet_account = 4;
}

message RefundRequest
{
    required .bnet.protocol.exchange.PartitionId partition_id = 1;
    required uint64 order_id = 2;
    required string cs_notes = 3;
    required uint64 cs_user_id = 4;
}

message GetConfigurationRequest
{
    required fixed32 program = 1;
}

message GetConfigurationResponse
{
    repeated .bnet.protocol.exchange.SpecialistConfig configs = 1;
}

message GetOfferFeeEstimationRequest
{
    required .bnet.protocol.exchange.PartitionId partition_id = 1;
    required .bnet.protocol.exchange.FeeEstimationData data = 2;
}

message GetBidFeeEstimationRequest
{
    required .bnet.protocol.exchange.PartitionId partition_id = 1;
    required .bnet.protocol.exchange.FeeEstimationData data = 2;
}

message GetFeeEstimationResponse
{
    required uint64 fee_amount = 1;
    repeated .bnet.protocol.exchange.FeeDetail fee_details = 2;
}

message OrderBookNotificationRequest
{
    repeated .bnet.protocol.exchange.OrderBookNotification notifications = 1;
    optional bool boot_strap_last = 2;
}

message OfferNotificationRequest
{
    required .bnet.protocol.exchange.OfferExtended offer = 1;
    required uint32 event = 2;
    optional .bnet.protocol.exchange.BlobFrom extra_info = 3;
    required uint32 object_type = 4;
    optional bool last_authorization = 5 [default = false];
}

message BidNotificationRequest
{
    required .bnet.protocol.exchange.BidExtended bid = 1;
    required uint32 event = 2;
    optional .bnet.protocol.exchange.BlobFrom extra_info = 3;
    required uint32 object_type = 4;
    optional bool last_authorization = 5 [default = false];
}

message QueryOrdersByAccountForItemRequest
{
    required .bnet.protocol.exchange.BlobFrom account_for_item = 1;
    optional .bnet.protocol.EntityId bnet_account = 2;
    required .bnet.protocol.exchange.QueryOrderFilter filter = 3;
}

message QueryOrdersByAccountForItemResponse
{
    repeated .bnet.protocol.exchange.OrderExtended orders = 1;
    required uint32 total_count = 2;
}

message GetFeeDetailsRequest
{
    required .bnet.protocol.exchange.PartitionId partition_id = 1;
    required uint64 order_id = 2;
    optional .bnet.protocol.EntityId bnet_account = 3;
}

message GetFeeDetailsResponse
{
    repeated .bnet.protocol.exchange.FeeDetail fee_details_in = 1;
    repeated .bnet.protocol.exchange.FeeDetail fee_details_out = 2;
}

message GetOrderBookStatisticsRequest
{
    required .bnet.protocol.exchange.PartitionId partition_id = 1;
    required uint32 order_type = 2;
    required uint64 quantity = 3;
    required uint32 last_trades = 4;
    required uint32 last_days = 5;
}

message GetOrderBookStatisticsResponse
{
    repeated .bnet.protocol.exchange.PriceDetail price_details = 1;
    required uint64 last_trades_average = 2;
    required uint64 last_days_average = 3;
}

message GetBidDetailsRequest
{
    required uint64 order_id = 1;
    required .bnet.protocol.exchange.PartitionId partition_id = 2;
}

message GetBidDetailsResponse
{
    required .bnet.protocol.exchange.OrderExtended bid = 1;
}

message GetOfferDetailsRequest
{
    required uint64 order_id = 1;
    required .bnet.protocol.exchange.PartitionId partition_id = 2;
}

message GetOfferDetailsResponse
{
    required .bnet.protocol.exchange.OrderExtended offer = 1;
}

message GetSystemTimeResponse
{
    required uint64 time = 1;
}

message CreateCSTradeRequest
{
    required .bnet.protocol.exchange.PartitionId partition_id = 1;
    required .bnet.protocol.exchange.BlobOfType object = 2;
    required fixed32 program = 3;
    required uint32 compatibility = 4;
    required uint32 allowed_realm = 5;
    required uint32 amount = 6;
    required .bnet.protocol.EntityId bnet_account = 7;
    optional .bnet.protocol.EntityId game_account = 8;
    required .bnet.protocol.exchange.BlobFrom account_for_item = 9;
    required string cs_notes = 10;
    required uint64 cs_user_id = 11;
}

message GetNotClosedOfferCountRequest
{
    optional string currency = 1;
    optional fixed32 source = 2;
    optional .bnet.protocol.EntityId bnet_account = 3;
}

message GetNotClosedOfferCountResponse
{
    required uint32 count = 1;
    optional uint32 limit = 2;
}

service ExchangeService
{
    rpc CreateOrderBook(.bnet.protocol.exchange.CreateOrderBookRequest) returns(.bnet.protocol.exchange.CreateOrderBookResponse)
    {
        option (method_id) = 1;
    }
    rpc PlaceOfferOnOrderBook(.bnet.protocol.exchange.PlaceOfferOnOrderBookRequest) returns(.bnet.protocol.exchange.PlaceOfferOnOrderBookResponse)
    {
        option (method_id) = 2;
    }
    rpc PlaceOfferCreateOrderBookIfNeeded(.bnet.protocol.exchange.PlaceOfferCreateOrderBookIfNeededRequest) returns(.bnet.protocol.exchange.PlaceOfferCreateOrderBookIfNeededResponse)
    {
        option (method_id) = 3;
    }
    rpc PlaceBidOnOrderBook(.bnet.protocol.exchange.PlaceBidOnOrderBookRequest) returns(.bnet.protocol.exchange.PlaceBidOnOrderBookResponse)
    {
        option (method_id) = 4;
    }
    rpc PlaceBidCreateOrderBookIfNeeded(.bnet.protocol.exchange.PlaceBidCreateOrderBookIfNeededRequest) returns(.bnet.protocol.exchange.PlaceBidCreateOrderBookIfNeededResponse)
    {
        option (method_id) = 5;
    }
    rpc QueryOffersByOrderBook(.bnet.protocol.exchange.QueryOffersByOrderBookRequest) returns(.bnet.protocol.exchange.QueryOffersByOrderBookResponse)
    {
        option (method_id) = 6;
    }
    rpc QueryBidsByOrderBook(.bnet.protocol.exchange.QueryBidsByOrderBookRequest) returns(.bnet.protocol.exchange.QueryBidsByOrderBookResponse)
    {
        option (method_id) = 7;
    }
    rpc QueryOffersByAccountForItem(.bnet.protocol.exchange.QueryOffersByAccountForItemRequest) returns(.bnet.protocol.exchange.QueryOffersByAccountForItemResponse)
    {
        option (method_id) = 8;
    }
    rpc QueryBidsByAccountForItem(.bnet.protocol.exchange.QueryBidsByAccountForItemRequest) returns(.bnet.protocol.exchange.QueryBidsByAccountForItemResponse)
    {
        option (method_id) = 9;
    }
    rpc QueryOrderBooksSummary(.bnet.protocol.exchange.QueryOrderBooksSummaryRequest) returns(.bnet.protocol.exchange.QueryOrderBooksSummaryResponse)
    {
        option (method_id) = 11;
    }
    rpc ReportAuthorize(.bnet.protocol.exchange_object_provider.ReportAuthorizeRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 13;
    }
    rpc ReportSettle(.bnet.protocol.exchange_object_provider.ReportSettleRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 14;
    }
    rpc ReportCancel(.bnet.protocol.exchange_object_provider.ReportCancelRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 15;
    }
    rpc SubscribeOrderBookStatusChange(.bnet.protocol.exchange.SubscribeOrderBookStatusChangeRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 16;
    }
    rpc UnsubscribeOrderBookStatusChange(.bnet.protocol.exchange.UnsubscribeOrderBookStatusChangeRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 17;
    }
    rpc SubscribeOrderStatusChange(.bnet.protocol.exchange.SubscribeOrderStatusChangeRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 18;
    }
    rpc UnsubscribeOrderStatusChange(.bnet.protocol.exchange.UnsubscribeOrderStatusChangeRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 19;
    }
    rpc GetPaymentMethods(.bnet.protocol.exchange_object_provider.GetPaymentMethodsRequest) returns(.bnet.protocol.exchange_object_provider.GetPaymentMethodsResponse)
    {
        option (method_id) = 20;
    }
    rpc ClaimBidItem(.bnet.protocol.exchange.ClaimRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 21;
    }
    rpc ClaimBidMoney(.bnet.protocol.exchange.ClaimRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 22;
    }
    rpc ClaimOfferItem(.bnet.protocol.exchange.ClaimRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 23;
    }
    rpc ClaimOfferMoney(.bnet.protocol.exchange.ClaimRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 24;
    }
    rpc CancelBid(.bnet.protocol.exchange.CancelRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 25;
    }
    rpc CancelOffer(.bnet.protocol.exchange.CancelRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 26;
    }
    rpc GetConfiguration(.bnet.protocol.exchange.GetConfigurationRequest) returns(.bnet.protocol.exchange.GetConfigurationResponse)
    {
        option (method_id) = 27;
    }
    rpc GetBidFeeEstimation(.bnet.protocol.exchange.GetBidFeeEstimationRequest) returns(.bnet.protocol.exchange.GetFeeEstimationResponse)
    {
        option (method_id) = 28;
    }
    rpc GetOfferFeeEstimation(.bnet.protocol.exchange.GetOfferFeeEstimationRequest) returns(.bnet.protocol.exchange.GetFeeEstimationResponse)
    {
        option (method_id) = 29;
    }
    rpc QueryOrdersByAccountForItem(.bnet.protocol.exchange.QueryOrdersByAccountForItemRequest) returns(.bnet.protocol.exchange.QueryOrdersByAccountForItemResponse)
    {
        option (method_id) = 30;
    }
    rpc ReportAuthorizeRiskVerdict(.bnet.protocol.exchange_risk.ReportAuthorizeRiskVerdictRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 31;
    }
    rpc ReportSettleRiskVerdict(.bnet.protocol.exchange_risk.ReportSettleRiskVerdictRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 32;
    }
    rpc DelaySettleRiskVerdict(.bnet.protocol.exchange_risk.DelaySettleRiskVerdictRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 33;
    }
    rpc GetFeeDetails(.bnet.protocol.exchange.GetFeeDetailsRequest) returns(.bnet.protocol.exchange.GetFeeDetailsResponse)
    {
        option (method_id) = 34;
    }
    rpc GetOrderBookStatistics(.bnet.protocol.exchange.GetOrderBookStatisticsRequest) returns(.bnet.protocol.exchange.GetOrderBookStatisticsResponse)
    {
        option (method_id) = 35;
    }
    rpc GetBidDetails(.bnet.protocol.exchange.GetBidDetailsRequest) returns(.bnet.protocol.exchange.GetBidDetailsResponse)
    {
        option (method_id) = 36;
    }
    rpc GetOfferDetails(.bnet.protocol.exchange.GetOfferDetailsRequest) returns(.bnet.protocol.exchange.GetOfferDetailsResponse)
    {
        option (method_id) = 37;
    }
    rpc GetSystemTime(.bnet.protocol.NoData) returns(.bnet.protocol.exchange.GetSystemTimeResponse)
    {
        option (method_id) = 38;
    }
    rpc CreateCSTrade(.bnet.protocol.exchange.CreateCSTradeRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 39;
    }
    rpc RefundBid(.bnet.protocol.exchange.RefundRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 40;
    }
    rpc ReportRefund(.bnet.protocol.exchange_object_provider.ReportRefundRequest) returns(.bnet.protocol.NoData)
    {
        option (method_id) = 41;
    }
    rpc GetNotClosedOfferCount(.bnet.protocol.exchange.GetNotClosedOfferCountRequest) returns(.bnet.protocol.exchange.GetNotClosedOfferCountResponse)
    {
        option (method_id) = 42;
    }
}

service ExchangeNotify
{
    rpc NotifyOrderBookStatusChange(.bnet.protocol.exchange.OrderBookNotificationRequest) returns(.bnet.protocol.NO_RESPONSE)
    {
        option (method_id) = 1;
    }
    rpc NotifyOfferStatusChange(.bnet.protocol.exchange.OfferNotificationRequest) returns(.bnet.protocol.NO_RESPONSE)
    {
        option (method_id) = 2;
    }
    rpc NotifyBidStatusChange(.bnet.protocol.exchange.BidNotificationRequest) returns(.bnet.protocol.NO_RESPONSE)
    {
        option (method_id) = 3;
    }
}

